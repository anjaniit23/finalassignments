{"ast":null,"code":"import axios from 'axios';\nimport { GET_ERRORS, ADD_POST, GET_POSTS, POST_LOADING, DELETE_POST } from './types';\n\nconst process = require(\"process\"); //add post\n\n\nexport const addPost = postData => dispatch => {\n  axios.post(`http://localhost:${process.env.PORT}/api/posts`, postData).then(res => dispatch({\n    type: ADD_POST,\n    payload: res.data\n  })).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; //get posts\n\nexport const getPosts = () => dispatch => {\n  dispatch(setPostLoading());\n  axios.get(`http://localhost:${process.env.PORT}/api/posts`).then(res => dispatch({\n    type: GET_POSTS,\n    payload: res.data\n  })).catch(err => {\n    dispatch({\n      type: GET_POSTS,\n      payload: null\n    });\n  });\n}; //add like\n\nexport const addLike = id => dispatch => {\n  dispatch(setPostLoading());\n  axios.post(`http://localhost:${process.env.PORT}/api/posts/like/${id}`).then(res => dispatch(getPosts())).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; //delete post\n\nexport const deletePost = id => dispatch => {\n  dispatch(setPostLoading());\n  axios.delete(`http://localhost:${process.env.PORT}/api/posts/${id}`).then(res => dispatch({\n    type: DELETE_POST,\n    payload: id\n  })).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; //set loading state\n\nexport const setPostLoading = () => {\n  return {\n    type: POST_LOADING\n  };\n};","map":{"version":3,"sources":["C:/Users/ANJANI IIT/OneDrive/Desktop/AnjaniB/my-app/src/actions/postactions.js"],"names":["axios","GET_ERRORS","ADD_POST","GET_POSTS","POST_LOADING","DELETE_POST","process","require","addPost","postData","dispatch","post","env","PORT","then","res","type","payload","data","catch","err","response","getPosts","setPostLoading","get","addLike","id","deletePost","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,UAAT,EAAoBC,QAApB,EAA6BC,SAA7B,EAAuCC,YAAvC,EAAqDC,WAArD,QAAuE,SAAvE;;AACA,MAAMC,OAAO,GAACC,OAAO,CAAC,SAAD,CAArB,C,CAEA;;;AACA,OAAO,MAAMC,OAAO,GAAEC,QAAD,IAAYC,QAAQ,IAAE;AACvCV,EAAAA,KAAK,CACCW,IADN,CACY,oBAAmBL,OAAO,CAACM,GAAR,CAAYC,IAAK,YADhD,EAC4DJ,QAD5D,EAEMK,IAFN,CAEWC,GAAG,IACNL,QAAQ,CAAC;AACLM,IAAAA,IAAI,EAACd,QADA;AAELe,IAAAA,OAAO,EAACF,GAAG,CAACG;AAFP,GAAD,CAHhB,EAOKC,KAPL,CAOWC,GAAG,IAAE;AACRV,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAACf,UADA;AAELgB,MAAAA,OAAO,EAACG,GAAG,CAACC,QAAJ,CAAaH;AAFhB,KAAD,CAAR;AAGG,GAXX;AAYH,CAbM,C,CAcP;;AACA,OAAO,MAAMI,QAAQ,GAAC,MAAIZ,QAAQ,IAAE;AAChCA,EAAAA,QAAQ,CAACa,cAAc,EAAf,CAAR;AACAvB,EAAAA,KAAK,CACCwB,GADN,CACW,oBAAmBlB,OAAO,CAACM,GAAR,CAAYC,IAAK,YAD/C,EAEMC,IAFN,CAEWC,GAAG,IACNL,QAAQ,CAAC;AACLM,IAAAA,IAAI,EAACb,SADA;AAELc,IAAAA,OAAO,EAACF,GAAG,CAACG;AAFP,GAAD,CAHhB,EAOKC,KAPL,CAOWC,GAAG,IAAE;AACRV,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAACb,SADA;AAELc,MAAAA,OAAO,EAAC;AAFH,KAAD,CAAR;AAGG,GAXX;AAYH,CAdM,C,CAeP;;AACA,OAAO,MAAMQ,OAAO,GAAEC,EAAD,IAAMhB,QAAQ,IAAE;AACjCA,EAAAA,QAAQ,CAACa,cAAc,EAAf,CAAR;AACAvB,EAAAA,KAAK,CACCW,IADN,CACY,oBAAmBL,OAAO,CAACM,GAAR,CAAYC,IAAK,mBAAkBa,EAAG,EADrE,EAEMZ,IAFN,CAEWC,GAAG,IACNL,QAAQ,CAACY,QAAQ,EAAT,CAHhB,EAIKH,KAJL,CAIWC,GAAG,IAAE;AACRV,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAACf,UADA;AAELgB,MAAAA,OAAO,EAACG,GAAG,CAACC,QAAJ,CAAaH;AAFhB,KAAD,CAAR;AAGG,GARX;AASH,CAXM,C,CAaP;;AACA,OAAO,MAAMS,UAAU,GAAED,EAAD,IAAMhB,QAAQ,IAAE;AACpCA,EAAAA,QAAQ,CAACa,cAAc,EAAf,CAAR;AACAvB,EAAAA,KAAK,CACC4B,MADN,CACc,oBAAmBtB,OAAO,CAACM,GAAR,CAAYC,IAAK,cAAaa,EAAG,EADlE,EAEMZ,IAFN,CAEWC,GAAG,IACNL,QAAQ,CAAC;AACLM,IAAAA,IAAI,EAACX,WADA;AAELY,IAAAA,OAAO,EAACS;AAFH,GAAD,CAHhB,EAOKP,KAPL,CAOWC,GAAG,IAAE;AACRV,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAACf,UADA;AAELgB,MAAAA,OAAO,EAACG,GAAG,CAACC,QAAJ,CAAaH;AAFhB,KAAD,CAAR;AAGG,GAXX;AAYH,CAdM,C,CAeP;;AAEA,OAAO,MAAMK,cAAc,GAAC,MAAI;AAC5B,SAAO;AACHP,IAAAA,IAAI,EAACZ;AADF,GAAP;AAGH,CAJM","sourcesContent":["import axios from 'axios';\r\n\r\nimport { GET_ERRORS,ADD_POST,GET_POSTS,POST_LOADING ,DELETE_POST} from './types';\r\nconst process=require(\"process\");\r\n\r\n//add post\r\nexport const addPost=(postData)=>dispatch=>{\r\n    axios\r\n         .post(`http://localhost:${process.env.PORT}/api/posts`,postData)\r\n         .then(res=>\r\n            dispatch({\r\n                type:ADD_POST,\r\n                payload:res.data\r\n            }))\r\n        .catch(err=>{\r\n            dispatch({\r\n                type:GET_ERRORS,\r\n                payload:err.response.data\r\n            })});\r\n};\r\n//get posts\r\nexport const getPosts=()=>dispatch=>{\r\n    dispatch(setPostLoading());\r\n    axios\r\n         .get(`http://localhost:${process.env.PORT}/api/posts`)\r\n         .then(res=>\r\n            dispatch({\r\n                type:GET_POSTS,\r\n                payload:res.data\r\n            }))\r\n        .catch(err=>{\r\n            dispatch({\r\n                type:GET_POSTS,\r\n                payload:null\r\n            })});\r\n};\r\n//add like\r\nexport const addLike=(id)=>dispatch=>{\r\n    dispatch(setPostLoading());\r\n    axios\r\n         .post(`http://localhost:${process.env.PORT}/api/posts/like/${id}`)\r\n         .then(res=>\r\n            dispatch(getPosts()))\r\n        .catch(err=>{\r\n            dispatch({\r\n                type:GET_ERRORS,\r\n                payload:err.response.data\r\n            })});\r\n};\r\n\r\n//delete post\r\nexport const deletePost=(id)=>dispatch=>{\r\n    dispatch(setPostLoading());\r\n    axios\r\n         .delete(`http://localhost:${process.env.PORT}/api/posts/${id}`)\r\n         .then(res=>\r\n            dispatch({\r\n                type:DELETE_POST,\r\n                payload:id\r\n            }))\r\n        .catch(err=>{\r\n            dispatch({\r\n                type:GET_ERRORS,\r\n                payload:err.response.data\r\n            })});\r\n};\r\n//set loading state\r\n\r\nexport const setPostLoading=()=>{\r\n    return {\r\n        type:POST_LOADING\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}