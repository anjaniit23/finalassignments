{"ast":null,"code":"import { GET_ERRORS, SET_CURRENT_USER } from './types';\nimport axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode'; //Register user\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(`/api/users/register`, userData).then(res => {\n    history.push('/SignIn');\n    alert(\"succesfully registered\");\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // // inside the state componet of SignUp.js..we could have used this.props.history.push('/Signin');\n// to direct tio login page whenever the Signup is done\n//login get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(`/api/users/login`, userData).then(res => {\n    //save to localstorage\n    const token = res.data.token1; //set token to ls\n\n    localStorage.setItem('jwtToken', token); //set token to auth header\n\n    setAuthToken(token); // decode token to get user data\n\n    const decoded = jwt_decode(token); //set current user\n\n    dispatch(setCurrentUser(decoded));\n    alert(\"succesfully loggedin \");\n  }).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; //set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // log user out\n\nexport const logoutUser = () => dispatch => {\n  //remove token from localstorage\n  localStorage.removeItem('jwtToken'); //remove auth header for future requests\n\n  setAuthToken(false); //set current user to {} which will set isAutheticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["G:/IIT kgp/My websites/finalassignments/my-app/src/actions/authActions.js"],"names":["GET_ERRORS","SET_CURRENT_USER","axios","setAuthToken","jwt_decode","registerUser","userData","history","dispatch","post","then","res","push","alert","catch","err","type","payload","response","data","loginUser","token","token1","localStorage","setItem","decoded","setCurrentUser","logoutUser","removeItem"],"mappings":"AAAA,SAAQA,UAAR,EAAmBC,gBAAnB,QAA0C,SAA1C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CACA;;AACA,OAAO,MAAMC,YAAY,GAAE,CAACC,QAAD,EAAUC,OAAV,KAAoBC,QAAQ,IAAE;AACtDN,EAAAA,KAAK,CAACO,IAAN,CAAY,qBAAZ,EAAkCH,QAAlC,EACEI,IADF,CACOC,GAAG,IAAE;AAACJ,IAAAA,OAAO,CAACK,IAAR,CAAa,SAAb;AAAwBC,IAAAA,KAAK,CAAC,wBAAD,CAAL;AAAiC,GADtE,EAEEC,KAFF,CAEQC,GAAG,IAAEP,QAAQ,CAAC;AACjBQ,IAAAA,IAAI,EAAChB,UADY;AAEjBiB,IAAAA,OAAO,EAACF,GAAG,CAACG,QAAJ,CAAaC;AAFJ,GAAD,CAFrB;AAMF,CAPM,C,CAQP;AACA;AACA;;AACA,OAAO,MAAMC,SAAS,GAACd,QAAQ,IAAEE,QAAQ,IAAE;AACvCN,EAAAA,KAAK,CAACO,IAAN,CAAY,kBAAZ,EAA8BH,QAA9B,EACMI,IADN,CACWC,GAAG,IAAE;AAEP;AACA,UAAMU,KAAK,GAAGV,GAAG,CAACQ,IAAJ,CAASG,MAAvB,CAHO,CAKP;;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAgCH,KAAhC,EANO,CAOP;;AACAlB,IAAAA,YAAY,CAACkB,KAAD,CAAZ,CARO,CASP;;AACA,UAAMI,OAAO,GAAErB,UAAU,CAACiB,KAAD,CAAzB,CAVO,CAWP;;AACAb,IAAAA,QAAQ,CAACkB,cAAc,CAACD,OAAD,CAAf,CAAR;AACAZ,IAAAA,KAAK,CAAC,uBAAD,CAAL;AACH,GAfN,EAgBMC,KAhBN,CAgBYC,GAAG,IAAE;AAETP,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAAChB,UADA;AAELiB,MAAAA,OAAO,EAACF,GAAG,CAACG,QAAJ,CAAaC;AAFhB,KAAD,CAAR;AAGG,GArBX;AAsBH,CAvBM,C,CAyBP;;AACA,OAAO,MAAMO,cAAc,GAAED,OAAD,IAAW;AACnC,SAAO;AACHT,IAAAA,IAAI,EAACf,gBADF;AAEHgB,IAAAA,OAAO,EAACQ;AAFL,GAAP;AAIH,CALM,C,CAMP;;AACA,OAAO,MAAME,UAAU,GAAC,MAAInB,QAAQ,IAAE;AAClC;AACAe,EAAAA,YAAY,CAACK,UAAb,CAAwB,UAAxB,EAFkC,CAGlC;;AACAzB,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJkC,CAKlC;;AACAK,EAAAA,QAAQ,CAACkB,cAAc,CAAC,EAAD,CAAf,CAAR;AACH,CAPM","sourcesContent":["import {GET_ERRORS,SET_CURRENT_USER} from './types';\r\nimport axios from 'axios';\r\nimport setAuthToken from '../utils/setAuthToken';\r\nimport jwt_decode from 'jwt-decode';\r\n//Register user\r\nexport const registerUser =(userData,history)=>dispatch=>{\r\n   axios.post(`/api/users/register`, userData)\r\n    .then(res=>{history.push('/SignIn');alert(\"succesfully registered\");})\r\n    .catch(err=>dispatch({\r\n        type:GET_ERRORS,\r\n        payload:err.response.data\r\n    }));\r\n};\r\n// // inside the state componet of SignUp.js..we could have used this.props.history.push('/Signin');\r\n// to direct tio login page whenever the Signup is done\r\n//login get user token\r\nexport const loginUser=userData=>dispatch=>{\r\n    axios.post(`/api/users/login`,userData)\r\n         .then(res=>{\r\n            \r\n             //save to localstorage\r\n             const token = res.data.token1;\r\n         \r\n             //set token to ls\r\n             localStorage.setItem('jwtToken',token);\r\n             //set token to auth header\r\n             setAuthToken(token);\r\n             // decode token to get user data\r\n             const decoded= jwt_decode(token);\r\n             //set current user\r\n             dispatch(setCurrentUser(decoded));\r\n             alert(\"succesfully loggedin \");\r\n         })\r\n         .catch(err=>{\r\n\r\n            dispatch({\r\n                type:GET_ERRORS,\r\n                payload:err.response.data\r\n            })});\r\n};\r\n\r\n//set logged in user\r\nexport const setCurrentUser=(decoded)=>{\r\n    return {\r\n        type:SET_CURRENT_USER,\r\n        payload:decoded\r\n    }\r\n}\r\n// log user out\r\nexport const logoutUser=()=>dispatch=>{\r\n    //remove token from localstorage\r\n    localStorage.removeItem('jwtToken');\r\n    //remove auth header for future requests\r\n    setAuthToken(false);\r\n    //set current user to {} which will set isAutheticated to false\r\n    dispatch(setCurrentUser({}));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}